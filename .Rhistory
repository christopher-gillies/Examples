angle(c(1,0),-svd.sample.cov$v[,2])
angle(c(1,0),svd.sample.cov$v[,1])
angle(c(1,0),svd.sample.cov$v[,2])
angle(c(1,0),-svd.sample.cov$v[,2])
plot(x.proj.2[,1],x.proj.3[,1])
ggplot(data.frame()) + geom_point(aes(x=x.proj[,1],y=x.proj[,2])) + scale_x_continuous(limits=c(-5,5))  + scale_y_continuous(limits=c(-5,5))
plot(x)
x.proj[,1]
S.sample = cov(x)
e.decomp = eigen(S.sample)
e.decomp$vectors %*% diag(e.decomp$values) %*% t(e.decomp$vectors)
x.proj = x %*% e.decomp$vectors
ggplot(data.frame()) + geom_point(aes(x=x.proj[,1],y=x.proj[,2])) + scale_x_continuous(limits=c(-5,5))  + scale_y_continuous(limits=c(-5,5))
ggplot(data.frame()) + geom_point(aes(x=x[,1],y=x[,2])) + scale_x_continuous(limits=c(-5,5))  + scale_y_continuous(limits=c(-5,5)) +
ggtitle("Random sample from a  bivariate normal distribution") + xlab("x1") + ylab("x2")
angle(c(1,0),svd.sample.cov$v[,1])
angle(c(1,0),-svd.sample.cov$v[,2])
angle(c(1,0),svd.sample.cov$v[,1])
angle(c(1,0),svd.sample.cov$v[,2])
angle(c(1,0),svd.sample.cov$v[,1])
angle(-c(1,0),svd.sample.cov$v[,2])
cor(x)
m = matrix(c(1,0.5,0.5,0.5,1,0.5,0.5,0.5,1),ncol=3)
m
eigen(m)
p = 0.25
m = matrix(c(1,p,p,p,1,p,p,p,1),ncol=3)
cor(p)
eigen(m)
cov.mat = matrix(
c(1,0.5,0.5,0.5,
0.5,1,0.5,
0.5,0.5,1),ncol=3)
vals = c(1,2,3)
vals %*% solve(cov.mat) %*% vals
cov.mat = matrix(
c(1,0.5,0.5,
0.5,1,0.5,
0.5,0.5,1),ncol=3)
vals = c(1,2,3)
vals %*% solve(cov.mat) %*% vals
cov.mat = matrix(
c(1,0.5,0.5,
0.5,1,0.5,
0.5,0.5,1),ncol=3)
vals = c(1,2,3)
sqrt(vals %*% solve(cov.mat) %*% vals)
vals = c(-1,2,3)
sqrt(vals %*% solve(cov.mat) %*% vals)
cov.mat = matrix(
c(1,0.5,0.5,
0.5,1,0.5,
0.5,0.5,1),ncol=3)
vals = c(-1,-2,3)
sqrt(vals %*% solve(cov.mat) %*% vals)
cov.mat = matrix(
c(1,0.5,0.5,
0.5,1,0.5,
0.5,0.5,1),ncol=3)
vals = c(-1,-3,3)
sqrt(vals %*% solve(cov.mat) %*% vals)
v
cov.mat = matrix(
c(1,0.5,-0.5,
0.5,1,0.5,
-0.5,0.5,1),ncol=3)
vals = c(-1,-3,3)
sqrt(vals %*% solve(cov.mat) %*% vals)
cov.mat = matrix(
c(1,   0.5, -0.25,
0.5, 1,    0.5,
-0.25, 0.5,  1),ncol=3)
vals = c(-1,-3,3)
sqrt(vals %*% solve(cov.mat) %*% vals)
cov.mat = matrix(
c(1,   0.5, -0.25,
0.5, 1,    0.5,
-0.25, 0.5,  1),ncol=3)
vals = c(-1,3,3)
sqrt(vals %*% solve(cov.mat) %*% vals)
cov.mat = matrix(
c(1,   0.5, -0.25,
0.5, 1,    0.5,
-0.25, 0.5,  1),ncol=3)
vals = c(1,3,3)
sqrt(vals %*% solve(cov.mat) %*% vals)
cov.mat = matrix(
c(1,   0.5, -0.25,
0.5, 1,    0.5,
-0.25, 0.5,  1),ncol=3)
vals = c(1,-3,3)
sqrt(vals %*% solve(cov.mat) %*% vals)
cov.mat = matrix(
c(1,   0.5, -0.25,
0.5, 1,    0.5,
-0.25, 0.5,  1),ncol=3)
cov.mat = matrix(
c(1,   0.5, -0.25,
0.5, 1,    0.5,
-0.25, 0.5,  1),ncol=3)
vals = c(1,-3,3)
sqrt(vals %*% solve(cov.mat) %*% vals)
sum(vals^2)
sqrt(sum(vals^2))
vals = c(3,0,3)
sqrt(vals %*% solve(cov.mat) %*% vals)
vals = c(-3,0,3)
sqrt(vals %*% solve(cov.mat) %*% vals)
cov.mat = matrix(
c(1,   0.5, -0.75,
0.5, 1,    0.5,
-0.75, 0.5,  1),ncol=3)
vals = c(-3,0,3)
sqrt(vals %*% solve(cov.mat) %*% vals)
cov.mat = matrix(
c(1,   0.5,
0.5, 1),ncol=2)
vals = c(-3,0)
sqrt(vals %*% solve(cov.mat) %*% vals)
cov.mat = matrix(
c(1,   0.5,
0.5, 1),ncol=2)
vals = c(-3,3)
sqrt(vals %*% solve(cov.mat) %*% vals)
cov.mat = matrix(
c(1,   0.5,
0.5, 1),ncol=2)
vals = c(-3,3)
sqrt(vals %*% solve(cov.mat) %*% vals)
vals = c(3,3)
sqrt(vals %*% solve(cov.mat) %*% vals)
cov.mat = matrix(
c(2,   0.5,
0.5, 1),ncol=2)
vals = c(-3,3)
sqrt(vals %*% solve(cov.mat) %*% vals)
cov.mat = matrix(
c(1,   0.5,
0.5, 1),ncol=2)
vals = c(-3,3)
sqrt(vals %*% solve(cov.mat) %*% vals)
eigen(cov.mat)
vals %*% eigen(cov.mat)$vectors
4.242641 / 0.5
vals = c(-3,4)
sqrt(vals %*% solve(cov.mat) %*% vals)
solve(cov.mat)
vals %*% solve(cov.mat)
vals
cov.mat = matrix(
c(1,   0.5,
0.5, 1),ncol=2)
vals = c(-3,4)
sqrt(vals %*% solve(cov.mat) %*% vals)
vals = c(3,4)
sqrt(vals %*% solve(cov.mat) %*% vals)
cov.mat = matrix(
c(1,   0.75,
0.75, 1),ncol=2)
vals = c(3,4)
sqrt(vals %*% solve(cov.mat) %*% vals)
vals = c(3,4)
vals
solve(cov.mat)
sqrt(vals %*% solve(cov.mat) %*% vals)
cov.mat = matrix(
c(1,   0.9,
0.9, 1),ncol=2)
vals = c(3,4)
sqrt(vals %*% solve(cov.mat) %*% vals)
cov.mat = matrix(
c(1,   0.9,
0.9, 1),ncol=2)
vals = c(3,4)
sqrt(vals %*% solve(cov.mat) %*% vals)\
cov.mat = matrix(
c(1,   0.9,
0.9, 1),ncol=2)
vals = c(3,4)
sqrt(vals %*% solve(cov.mat) %*% vals)
cov.mat = matrix(
c(1,   0.99,
0.99, 1),ncol=2)
vals = c(3,4)
sqrt(vals %*% solve(cov.mat) %*% vals)
vals = c(3,3)
sqrt(vals %*% solve(cov.mat) %*% vals)
eigen(cov.mat)
vals = c(3,4)
vals %eigen.decomp = eigen(cov.mat)
eigen.decomp = eigen(cov.mat)
vals.proj = vals %*% eigen.decomp$vectors
vals.proj
vals.proj = vals %*% eigen.decomp$vectors / sqrt(eigen.decomp$values)
vals.proj
sum(vals.proj^2)
sqrt(sum(vals.proj^2))
vals = c(3,4)
sqrt(vals %*% solve(cov.mat) %*% vals)
vals.proj.scaled = vals %*% eigen.decomp$vectors / sqrt(eigen.decomp$values)
sqrt(sum(vals.proj.scaled^2))
vals = c(3,3)
sqrt(vals %*% solve(cov.mat) %*% vals)
vals = c(1,3)
sqrt(vals %*% solve(cov.mat) %*% vals)
vals = c(-1,3)
sqrt(vals %*% solve(cov.mat) %*% vals)
eigen.decomp = eigen(cov.mat)
vals = c(3,4)
sqrt(vals %*% solve(cov.mat) %*% vals)
vals.proj.scaled = vals %*% eigen.decomp$vectors / sqrt(eigen.decomp$values)
sqrt(sum(vals.proj.scaled^2))
vals = c(-1,3)
sqrt(vals %*% solve(cov.mat) %*% vals)
vals.proj.scaled = vals %*% eigen.decomp$vectors / sqrt(eigen.decomp$values)
sqrt(sum(vals.proj.scaled^2))
cov.mat = matrix(
c(1,   -0.99,
-0.99, 1),ncol=2)
eigen.decomp = eigen(cov.mat)
vals = c(3,4)
sqrt(vals %*% solve(cov.mat) %*% vals)
cov.mat = matrix(
c(1,   -0.5,
--0.5, 1),ncol=2)
eigen.decomp = eigen(cov.mat)
vals = c(-1,2)
sqrt(vals %*% solve(cov.mat) %*% vals)
cov.mat = matrix(
c(1,   -0.5,
--0.5, 1),ncol=2)
eigen.decomp = eigen(cov.mat)
vals = c(-1.5,2)
sqrt(vals %*% solve(cov.mat) %*% vals)
cov.mat = matrix(
c(1,   -0.5,
-0.5, 1),ncol=2)
eigen.decomp = eigen(cov.mat)
vals = c(-1.5,2)
sqrt(vals %*% solve(cov.mat) %*% vals)
#distance from origin in white transformed space
vals.proj.scaled = vals %*% eigen.decomp$vectors / sqrt(eigen.decomp$values)
sqrt(sum(vals.proj.scaled^2))
vals = c(0,2)
sqrt(vals %*% solve(cov.mat) %*% vals)
vals = c(2,2)
sqrt(vals %*% solve(cov.mat) %*% vals)
cov.mat = matrix(
c(1,   0,
0, 1),ncol=2)
vals = c(0,2)
sqrt(vals %*% solve(cov.mat) %*% vals)
cov.mat = matrix(
c(1,   0.25,
0.25, 1),ncol=2)
vals = c(0.5,2)
sqrt(vals %*% solve(cov.mat) %*% vals)
vals = c(2,0.5)
sqrt(vals %*% solve(cov.mat) %*% vals)
vals = c(1,0.5)
sqrt(vals %*% solve(cov.mat) %*% vals)
vals = c(1,-0.5)
sqrt(vals %*% solve(cov.mat) %*% vals)
vals = c(-1,-0.5)
sqrt(vals %*% solve(cov.mat) %*% vals)
vals = c(-1,-1)
sqrt(vals %*% solve(cov.mat) %*% vals)
vals = c(-2,-2)
sqrt(vals %*% solve(cov.mat) %*% vals)
cov.mat = matrix(
c(1,   0.5, -0.75,
0.5, 1,    0.5,
-0.75, 0.5,  1),ncol=3)
vals = c(-3,0,3)
sqrt(vals %*% solve(cov.mat) %*% vals)
cov.mat = matrix(
c(1,   0.25,
0.25, 1),ncol=2)
vals = c(-2,-2)
sqrt(vals %*% solve(cov.mat) %*% vals)
vals = c(-2,-4)
sqrt(vals %*% solve(cov.mat) %*% vals)
cov.mat = matrix(
c(1,   0.25,
0.25, 1),ncol=2)
vals = c(-3,-4)
sqrt(vals %*% solve(cov.mat) %*% vals)
cov.mat = matrix(
c(1,   0.25,
0.25, 1),ncol=2)
vals = c(-3,-4)
sqrt(vals %*% solve(cov.mat) %*% vals)
cov.mat = matrix(
c(1,   0.25,
0.25, 1),ncol=2)
vals = c(4,-4)
sqrt(vals %*% solve(cov.mat) %*% vals)
cov.mat = matrix(
c(1,   0.25,
0.25, 1),ncol=2)
vals = c(4,-2)
sqrt(vals %*% solve(cov.mat) %*% vals)
cov.mat = matrix(
c(1,   0.25,
0.25, 1),ncol=2)
vals = c(2,-2)
sqrt(vals %*% solve(cov.mat) %*% vals)
vals = c(2,-1)
sqrt(vals %*% solve(cov.mat) %*% vals)
vals = c(2,-3)
sqrt(vals %*% solve(cov.mat) %*% vals)
cov.mat = matrix(
c(1,   0,
0, 1),ncol=2)
vals = c(2,-3)
sqrt(vals %*% solve(cov.mat) %*% vals)
cov.mat = matrix(
c(1,   0,
0, 1),ncol=2)
vals = c(3,-3)
sqrt(vals %*% solve(cov.mat) %*% vals)
cov.mat = matrix(
c(1,   0,
0, 1),ncol=2)
vals = c(3,3)
sqrt(vals %*% solve(cov.mat) %*% vals)
vals = c(3,3)
sqrt(vals %*% solve(cov.mat) %*% vals)
cov.mat = matrix(
c(1,   0.9,
0.9, 1),ncol=2)
vals = c(3,3)
sqrt(vals %*% solve(cov.mat) %*% vals)
cov.mat = matrix(
c(1,   -0.25,
-0.25, 1),ncol=2)
vals = c(2,-3)
sqrt(vals %*% solve(cov.mat) %*% vals)
cov.mat = matrix(
c(1,   0.25,
0.25, 1),ncol=2)
vals = c(2,-3)
sqrt(vals %*% solve(cov.mat) %*% vals)
cov.mat = matrix(
c(1,   -0.25,
-0.25, 1),ncol=2)
vals = c(2,-3)
sqrt(vals %*% solve(cov.mat) %*% vals)
pnorm(2)
pnorm(2,lower.tail = F)
pnorm(3,lower.tail = F)
cov.mat = matrix(
c(1,   -0.25,
-0.25, 1),ncol=2)
vals = c(2,-2)
sqrt(vals %*% solve(cov.mat) %*% vals)
cov.mat = matrix(
c(1,   0.25,
0.25, 1),ncol=2)
vals = c(2,-2)
sqrt(vals %*% solve(cov.mat) %*% vals)
vals %*% solve(cov.mat) %*% vals
cov.mat = matrix(
c(4,   0.25,
0.25, 4),ncol=2)
vals = c(4,-4)
sqrt(vals %*% solve(cov.mat) %*% vals)
cov.mat = matrix(
c(1,   0.25,
0.25, 1),ncol=2)
vals = c(2,-2)
sqrt(vals %*% solve(cov.mat) %*% vals)
cov.mat = matrix(
c(4,   4*0.25,
4*0.25, 4),ncol=2)
vals = c(4,-4)
sqrt(vals %*% solve(cov.mat) %*% vals)
cov.mat = matrix(
c(1,   0.25,
0.25, 1),ncol=2)
cov.mat = matrix(
c(4,   4*0.25,
4*0.25, 4),ncol=2)
vals = c(4,-4)
sqrt(vals %*% solve(cov.mat) %*% vals)
cov.mat = matrix(
c(1,   0.25,
0.25, 1),ncol=2)
vals = c(2,-2)
sqrt(vals %*% solve(cov.mat) %*% vals)
cov.mat = matrix(
c(1,   0,
0, 1),ncol=2)
vals = c(3,3)
sqrt(vals %*% solve(cov.mat) %*% vals)
sqrt(3^2 + 3^2)
pchisq(3^2 + 3^2, df=2)
pchisq(3^2 + 3^2, df=2,lower.tail = F)
pchisq(3^2, df=1,lower.tail = F)
qnorm(pchisq(3^2 + 3^2, df=2,lower.tail = F))
qnorm(pchisq(3^2 + 3^2, df=2,lower.tail = F),lower.tail = F)
cov.mat = matrix(
c(1,   0.5, -0.75,
0.5, 1,    0.5,
-0.75, 0.5,  1),ncol=3)
vals = c(-3,0,3)
sqrt(vals %*% solve(cov.mat) %*% vals)
vals %*% eigen.decomp$vectors / sqrt(eigen.decomp$values)
cov.mat = matrix(
c(1,   -0.5,
-0.5, 1),ncol=2)
eigen.decomp = eigen(cov.mat)
vals = c(-1.5,2)
sqrt(vals %*% solve(cov.mat) %*% vals)
#distance from origin in white transformed space
vals.proj.scaled = vals %*% eigen.decomp$vectors / sqrt(eigen.decomp$values)
sqrt(sum(vals.proj.scaled^2))
vals.proj.scaled
sum(vals.proj.scaled)
sum(vals.proj.scaled)^2
sum(vals.proj.scaled)
eigen.decomp$values
vals = c(-1.5,1.5)
sqrt(vals %*% solve(cov.mat) %*% vals)
#distance from origin in white transformed space
vals.proj.scaled = vals %*% eigen.decomp$vectors / sqrt(eigen.decomp$values)
sqrt(sum(vals.proj.scaled^2))
sum(vals.proj.scaled)
#distance from origin in white transformed space
vals.proj.scaled = vals %*% eigen.decomp$vectors / sqrt(eigen.decomp$values)
sqrt(sum(vals.proj.scaled^2))
sum(vals.proj.scaled)
vals = c(-1.5,2)
sqrt(vals %*% solve(cov.mat) %*% vals)
#distance from origin in white transformed space
vals.proj.scaled = vals %*% eigen.decomp$vectors / sqrt(eigen.decomp$values)
sqrt(sum(vals.proj.scaled^2))
sum(vals.proj.scaled)
eigen.decomp = eigen(cov.mat)
vals = c(-1.5,-2)
sqrt(vals %*% solve(cov.mat) %*% vals)
#distance from origin in white transformed space
vals.proj.scaled = vals %*% eigen.decomp$vectors / sqrt(eigen.decomp$values)
sqrt(sum(vals.proj.scaled^2))
sum(vals.proj.scaled)
vals.proj.scaled
#distance from origin in white transformed space
vals.proj.scaled = vals %*% eigen.decomp$vectors / sqrt(eigen.decomp$values)
sqrt(sum(vals.proj.scaled^2))
sum(vals.proj.scaled)
eigen.decomp$values
sqrt(sum(vals.proj.scaled^2))
sum(vals.proj.scaled)
vals = c(2,-2)
sqrt(vals %*% solve(cov.mat) %*% vals)
#distance from origin in white transformed space
vals.proj.scaled = vals %*% eigen.decomp$vectors / sqrt(eigen.decomp$values)
sqrt(sum(vals.proj.scaled^2))
sum(vals.proj.scaled)
vals = c(-2,-2)
sqrt(vals %*% solve(cov.mat) %*% vals)
#distance from origin in white transformed space
vals.proj.scaled = vals %*% eigen.decomp$vectors / sqrt(eigen.decomp$values)
sqrt(sum(vals.proj.scaled^2))
sum(vals.proj.scaled)
eigen.decomp$vectors
cov.mat = matrix(
c(1,   -0.5,
-0.5, 1),ncol=2)
eigen.decomp = eigen(cov.mat)
vals = c(-2,-2)
sqrt(vals %*% solve(cov.mat) %*% vals)
#distance from origin in white transformed space
vals.proj.scaled = vals %*% eigen.decomp$vectors / sqrt(eigen.decomp$values)
sqrt(sum(vals.proj.scaled^2))
acos(vals.proj.scaled, c(1,0))
andle(vals.proj.scaled, c(1,0))
angle(vals.proj.scaled, c(1,0))
vals.proj.scaled
cov.mat = matrix(
c(1,   -0.5,
-0.5, 1),ncol=2)
eigen.decomp = eigen(cov.mat)
vals = c(-2,1)
sqrt(vals %*% solve(cov.mat) %*% vals)
#distance from origin in white transformed space
vals.proj.scaled = vals %*% eigen.decomp$vectors / sqrt(eigen.decomp$values)
sqrt(sum(vals.proj.scaled^2))
sum(vals.proj.scaled)
sqrt(sum(vals.proj.scaled^2))
angle(c(1,0),sqrt(sum(vals.proj.scaled^2)))
angle(c(1,0),vals.proj.scaled)
vals.proj.scaled
vals.proj.scaled
angle(c(1,0),t(vals.proj.scaled))
sum(vals.proj.scaled)
t(vals.proj.scaled)
cov.mat = matrix(
c(1,   -0.5,
-0.5, 1),ncol=2)
eigen.decomp = eigen(cov.mat)
vals = c(-2,1)
sqrt(vals %*% solve(cov.mat) %*% vals)
#distance from origin in white transformed space
vals.proj.scaled = vals %*% eigen.decomp$vectors / sqrt(eigen.decomp$values)
sqrt(sum(vals.proj.scaled^2))
angle(c(1,0),t(vals.proj.scaled))
sqrt(sum(vals.proj.scaled^2))
angle(c(1,0),t(vals.proj.scaled))
?cos
cos(30 /180 * pi)
sin(30 /180 * pi)
